# Задание: Разработать консольную игру "Битва героев" на Python с использованием классов и разработать план проекта по
# этапам/или создать kanban доску для работы над данным проектом
# Общее описание:
# Создайте простую текстовую боевую игру, где игрок и компьютер управляют героями с различными характеристиками. Игра состоит
# из раундов, в каждом раунде игроки по очереди наносят урон друг другу, пока у одного из героев не закончится здоровье.
# Требования:
# Используйте ООП (Объектно-Ориентированное Программирование) для создания классов героев.
# Игра должна быть реализована как консольное приложение.
# Классы:
# Класс Hero:
# Атрибуты:
# Имя (name)
# Здоровье (health), начальное значение 100
# Сила удара (attack_power), начальное значение 20
# Методы:
# attack(other): атакует другого героя (other), отнимая здоровье в размере своей силы удара
# is_alive(): возвращает True, если здоровье героя больше 0, иначе False
# Класс Game:
# Атрибуты:
# Игрок (player), экземпляр класса Hero
# Компьютер (computer), экземпляр класса Hero
# Методы:
# start(): начинает игру, чередует ходы игрока и компьютера, пока один из героев не умрет. Выводит информацию о каждом ходе
# (кто атаковал и сколько здоровья осталось у противника) и объявляет победителя.

import random                                           # Импорт модуля random

#Класс описывающий игроков
class Hero():
    def __init__(self, name):
        self.name = name                                # Имя игрока
        self.health = 100                                # Уровень здоровья
        self.attack_power = 20                          # Сила удара

    def attack(self, power, other):                     # Имитирует атаку
        effect = random.randint(0, 10)            # Уровень применения защиты противником
        other.health -= int((power * effect/10) // 1)   # Уменьшение здоровья противника с учетом защиты
        print(f"Противник применил защитный прием. Сила удара получилась {int((power * effect/10) // 1)}")
        if self.attack_power > 5:
            self.attack_power -= int((power / 5) // 1) # Уменьшение собственной силы удара из-за усталости

    def is_alive(self):                                 # Определяет возможность продолжения боя игроком (уровень здоровья > 0)
        if self.health > 0:
            return True
        else:
            return False

#Класс описывающий механизм ведения боя
class Game():
    def __init__(self, player, computer):
        self.player = player                            # Игрок (объект класса Hero)
        self.computer = computer                        # Компьютер (объект класса Hero)

    def start(self):                                    # Реализует механизм ведения боя
        print("Бой начинается\nВы выступаете в роли Игрока")

        while True:                                     # Цикл проведения раундов

            # Атака Игрока
            power = int(input(f"Ваша максимальная сила удара: {self.player.attack_power}. С какой силой будете бить? "))
            print(f"Игрок нанес удар силой {power}")
            self.player.attack(power, self.computer)
            if self.computer.is_alive():                # Проверяем уровень здоровья Компьютера
                print(f"У Компьютера осталось {self.computer.health}% здоровья")
            else:
                print("Игрок победил!!!!!!!")
                break

            # Атака Компьютера
            power = random.randint(1, self.computer.attack_power)   # Сила удара Компьютера
            print(f"Компьютер нанес удар силой {power}")
            self.computer.attack(power, self.player)
            if self.player.is_alive():                  # Проверяем уровень здоровья Игрока
                print(f"У Игрока осталось {self.player.health}% здоровья")
            else:
                print("Компьютер победил. Не расстраивайтесь. Следующий раз повезет.")
                break

# Создаём объекты игроков
player = Hero("Игрок")
computer = Hero("Компьютер")

# Создаём объект механизма боя и запускаем бой
game = Game(player, computer)
game.start()




